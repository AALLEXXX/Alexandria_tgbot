
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from create_bot import bot, db
from aiogram.enums.chat_type import ChatType
from aiogram.filters import Command
from aiogram.filters import CommandStart

main_router = Router()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–Ω–∞–¥—ã —Å—Ç–∞—Ä—Ç
@main_router.message(CommandStart())
async def start_command(message: types.Message):
    # weather = types.InlineKeyboardButton(text="üí´–ü–æ–≥–æ–¥–∞üí´", callback_data="pogoda")
    builder = InlineKeyboardBuilder()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–≥–¥–∞ –¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–∞–º –ø–æ–∏—Å–∫–∞
    if db.check_user_in_queue(message.chat.id) is False and db.check_active_chat(message.chat.id) is False:
        anon_chat1 = types.InlineKeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—ÇüëÅüåê", callback_data="anon_chat")
        builder.add(anon_chat1)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üññ", reply_markup=builder.as_markup())
    else:
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç!')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–æ–ø, –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
@main_router.message(Command('stop'))
async def stop_chat_command(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ –ø—Ä–æ—â–∞–µ–º—Å—è –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —É–¥–∞–ª–∏–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if db.check_active_chat(message.chat.id):
        await bot.send_message(act_chat[2], '–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Çüòî')
        await bot.send_message(act_chat[2], '–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ωüì¥')
        await bot.send_message(act_chat[1], '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Çüòî')
        await bot.send_message(act_chat[1], '–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ωüì¥')
        db.stop_chat(message.chat.id)
    else:
        await bot.send_message(message.chat.id, '‚õî–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞‚õîÔ∏è')


# –¥–∞–ª—å—à–µ –∏–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ


# –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫ —á–∞—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
@main_router.message(F.photo)
async def handle_photo_message(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    if db.check_active_chat(message.chat.id):
        await bot.send_photo(act_chat[2], photo=message.photo[-1].file_id)


@main_router.message(F.audio)
async def handle_audio_message(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    if db.check_active_chat(message.chat.id):
        await bot.send_audio(act_chat[2], message.audio.file_id)


@main_router.message(F.video)
async def handle_video_message(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    if db.check_active_chat(message.chat.id):
        await bot.send_video(act_chat[2], message.video.file_id)


@main_router.message(F.video_note)
async def handle_video_circe_message(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    if db.check_active_chat(message.chat.id):
        await bot.send_video_note(act_chat[2], message.video_note.file_id)


@main_router.message(F.sticker)
async def handle_stikers_message(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    if db.check_active_chat(message.chat.id):
        await bot.send_sticker(act_chat[2], message.sticker.file_id)


@main_router.message(F.voice)
async def handle_voice_message(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    if db.check_active_chat(message.chat.id):
        await bot.send_voice(act_chat[2], message.voice.file_id)


@main_router.message(F.text)
async def anon_chat(message: types.Message):
    act_chat = db.get_active_chat(message.chat.id)
    if db.check_active_chat(message.chat.id):
        await bot.send_message(act_chat[2], message.text)


async def anon_chat_but(callback_query):
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)

    keyboard = InlineKeyboardBuilder()

    looking = types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞üîÆ", callback_data="gender selection")
    return_but = types.InlineKeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è‚Ü©", callback_data="return")

    keyboard.add(looking, return_but)

    await bot.send_message(callback_query.from_user.id, "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—ÇüëÅüåê", reply_markup=keyboard.as_markup())


async def queue_with_reg(callback_query):
    if db.get_sex(callback_query.message.chat.id) is False:
        await bot.delete_message(chat_id=callback_query.message.chat.id,
                                 message_id=callback_query.message.message_id)

        keyboard = InlineKeyboardBuilder()

        boy = types.InlineKeyboardButton(text="–ø–∞—Ä–µ–Ω—åüôé", callback_data="reg_guy")
        girl = types.InlineKeyboardButton(text="–¥–µ–≤—É—à–∫–∞üôé‚Äç‚ôÄ", callback_data="reg_girl")

        keyboard.add(boy, girl)
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                               reply_markup=keyboard.as_markup())

    else:
        await bot.delete_message(chat_id=callback_query.message.chat.id,
                                 message_id=callback_query.message.message_id)

        keyboard = InlineKeyboardBuilder()

        boy = types.InlineKeyboardButton(text="–ø–∞—Ä–µ–Ω—åüôé", callback_data="sex_guy")
        girl = types.InlineKeyboardButton(text="–¥–µ–≤—É—à–∫–∞üôé‚Äç‚ôÄÔ∏è", callback_data="sex_girl")
        any_sex = types.InlineKeyboardButton(text="–ª—é–±–æ–πüöª", callback_data="sex_any")
        return_but = types.InlineKeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è‚Ü©", callback_data="return")

        keyboard.add(boy, girl, any_sex, return_but)
        await bot.send_message(callback_query.from_user.id, "–ü–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=keyboard.as_markup())

    # –∫–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞


async def waiting(callback_query, chat_id, sex):
    db.add_queue(chat_id, sex)
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)

    keyboard = InlineKeyboardBuilder()
    stop_queue = types.InlineKeyboardButton(text="‚ùå–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫‚ùå", callback_data="stop_queue")
    keyboard.add(stop_queue)
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—èüîÆ", reply_markup=keyboard.as_markup())
    sticker = await bot.send_sticker(callback_query.message.chat.id,
                                     sticker='CAACAgIAAxkBAAILWWSpysWYaY5CTv2Pbv4hd3tGePU6AAJeXAEAAWOLRgz16gRfGZceQS8E')
    sticker_1 = sticker.message_id
    db.save_sticker_id(sticker_1, chat_id)


async def queue(callback_query, sex):
    chat_id = callback_query.message.chat.id

    if db.check_user_in_queue(chat_id) is False and db.check_active_chat(chat_id) is False:
        user0 = db.check_sex(chat_id, sex)
        if user0:
            user0_sticker = db.get_sticker_id(user0)
            db.create_chat(user0, chat_id)
            act_chat = db.get_active_chat(chat_id)
            try:
                await bot.delete_message(chat_id=user0,
                                         message_id=user0_sticker)
            except Exception as ex:
                print(ex)
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)

            await bot.send_message(act_chat[1], "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Çü§ù")
            await bot.send_message(act_chat[2], "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Çü§ù")
        else:
            await waiting(callback_query, chat_id, sex)
    else:
        await bot.send_message(callback_query.from_user.id, "—Ö–≤–∞—Ç–∏—Ç –¥—É–¥–æ—Å–∏—Ç—å")


async def return_func(callback_query):
    chat_id = callback_query.message.chat.id
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)
    keyboard = InlineKeyboardBuilder()
    weather = types.InlineKeyboardButton(text="üí´–ü–æ–≥–æ–¥–∞üí´", callback_data="pogoda")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if db.check_user_in_queue(chat_id) is False and db.check_active_chat(chat_id) is False:
        anon_chat1 = types.InlineKeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—ÇüëÅüåê", callback_data="anon_chat")
        keyboard.add(weather, anon_chat1)
    else:
        keyboard.add(weather)
    await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç! üññ", reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@main_router.callback_query()
async def process_callback_button(callback_query: types.CallbackQuery):
    chat_type = callback_query.message.chat.type
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ
    if chat_type == ChatType.PRIVATE:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        button_data = callback_query.data
        chat_id = callback_query.message.chat.id
        if button_data == 'return':
            await return_func(callback_query)
        #
        # if button_data == "pogoda":
        #     await show_pogoda(callback_query)
        #
        # elif button_data == "pogoda_moscow":
        #     url = 'https://world-weather.ru/pogoda/russia/moscow/'
        #     await bot.send_message(callback_query.from_user.id, get_weather(url) + " –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        # elif button_data == "pogoda_sp":
        #     url = 'https://world-weather.ru/pogoda/russia/saint_petersburg/'
        #     await bot.send_message(callback_query.from_user.id, get_weather(url) + " –≤ –ü–∏—Ç–µ—Ä–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
        # elif button_data == "pogoda_sev":
        #     url = 'https://world-weather.ru/pogoda/russia/sevastopol/'
        #     await bot.send_message(callback_query.from_user.id, get_weather(url) + " –≤ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")

        if button_data == 'anon_chat':
            await anon_chat_but(callback_query)

        if button_data == 'gender selection':
            await queue_with_reg(callback_query)

        if button_data == 'reg_guy':
            await bot.send_message(callback_query.from_user.id, "‚úÖ–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!‚úÖ")
            await anon_chat_but(callback_query)
            db.add_sex(chat_id, 'guy')

        if button_data == 'reg_girl':
            await bot.send_message(callback_query.from_user.id, "‚úÖ–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!‚úÖ")
            await anon_chat_but(callback_query)
            db.add_sex(chat_id, 'girl')

        if button_data == 'sex_guy':
            await queue(callback_query, 'guy')

        if button_data == 'sex_girl':
            await queue(callback_query, 'girl')

        if button_data == 'sex_any':
            await queue(callback_query, 'any')

        if button_data == 'stop_queue':
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=db.get_sticker_id(chat_id))
            chat_id = callback_query.message.chat.id
            db.stop_queue(chat_id)
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
            keyboard = InlineKeyboardBuilder()
            return_but = types.InlineKeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è‚Ü©Ô∏è", callback_data="return")
            keyboard.add(return_but)
            await bot.send_message(callback_query.from_user.id, "‚ùå–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚ùå", reply_markup=keyboard.as_markup())



